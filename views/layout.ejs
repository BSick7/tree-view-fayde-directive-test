<!DOCTYPE html>
<html>
  <head>
    <meta name="description" content="overview &amp; stats" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/bootstrap/2.3.2/css/bootstrap.min.css" />
    <link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/font-awesome/3.2.1/css/font-awesome.min.css" />

    
    <!--  
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage 
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.
        
        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:
            
            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/styles/style.css">
    <link rel="stylesheet" href="/styles/treeview.css">
    <!--STYLES END-->
  </head>

  <body ng-app="Demo">



    <div class="container" ng-controller="DemoController">
      <div class="row">
        <div class="span6">
          <div style="padding: 10px; border: 1px solid #aaa;">
            <ul class="breadcrumb">
              <li ng-repeat="b in breadcrums" ng-class="{ active: $last }">{{ b }} <span class="divider" ng-show="!$last">/</span></li>
            </ul>
            <div>Root</div>
            <div tree-view="structure" tree-view-options="options"></div>
          </div>
        </div>

        <div class="span6">
          <div style="padding: 10px; border: 1px solid #aaa;">
            <div>Root</div>
            <div tree-view="data" tree-view-options="options">
            </div>
        </div>
      </div>  
    
    <script src="http://code.jquery.com/jquery-2.1.1.min.js"></script>
    <script src="http://maxcdn.bootstrapcdn.com/bootstrap/2.3.2/js/bootstrap.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.2.21/angular.min.js"></script>
    <script>
      (function () {
        var app = angular.module('Demo', []);
        
        app.controller('DemoController', ['$scope', function ($scope) {
          console.log('here');
          $scope.breadcrums = [''];
          
          $scope.structure = { folders: [
            { name: 'Folder 1', files: [{ name: 'File 1.jpg' }, { name: 'File 2.png' }], folders: [
              { name: 'Subfolder 1', files: [{ name: 'File 1.jpg' }, { name: 'File 2.png' }], folders: [
              { name: 'Subfolder 1', files: [{ name: 'Subfile 1.txt' }] },
              { name: 'Subfolder 2' },
              { name: 'Subfolder 3' }
            ]},
              { name: 'Subfolder 2' },
              { name: 'Subfolder 3' }
            ]},
            { name: 'Folder 2' },
            { files: [{ name: 'File 1.jpg' }, { name: 'File 2.png' }]}
          ]};
          
          $scope.data = 
            {  
               folders:{  
                  name: "neil1", 
                  files: [{ name: 'File 1.jpg' }, { name: 'File 2.png' }],
                  folders: [{
                    name: "neil"
                  }]
                  // id:7,
                  // type:{  
                  //    xmlns: "http://schemas.wsick.com/fayde",
                  //    name: "TextBlock"
                  // },
                  // children:[  

                  // ]
               },
               test : {
                  name: "neil"
               }
            }
          $scope.options = {
            onNodeSelect: function (node, breadcrums) {
              $scope.breadcrums = breadcrums;
            }
          };
          
          $scope.options2 = {
            collapsible: false
          };
          
          var iconClassMap = {
            txt: 'icon-file-text',
            jpg: 'icon-picture blue',
            png: 'icon-picture orange'
          },
            defaultIconClass = 'icon-file';
          
          $scope.options3 = {
            mapIcon: function (file) {
              var pattern = /\.(\w+)$/,
                match = pattern.exec(file.name),
                ext = match && match[1];
              
              return iconClassMap[ext] || defaultIconClass;
            }
          };

          $scope.data = 
            {  
               folders:{  
                  id:7,
                  type:{  
                     xmlns: "http://schemas.wsick.com/fayde",
                     name: "TextBlock"
                  },
                  children:[  

                  ]
               },
               "assets":{  
                  "width":null,
                  "height":null,
                  "minWidth":0,
                  "minHeight":0,
                  "maxWidth":null,
                  "maxHeight":null,
                  "useLayoutRounding":true,
                  "margin":{  
                     "left":0,
                     "top":0,
                     "right":0,
                     "bottom":0
                  },
                  "horizontalAlignment":3,
                  "verticalAlignment":3,
                  "clip":null,
                  "effect":null,
                  "visibility":0,
                  "opacity":1,
                  "isHitTestVisible":true,
                  "renderTransform":{  
                     "0":1,
                     "1":0,
                     "2":0,
                     "3":0,
                     "4":1,
                     "5":0,
                     "6":0,
                     "7":0,
                     "8":1
                  },
                  "renderTransformOrigin":{  
                     "x":0,
                     "y":0
                  },
                  "effectPadding":{  
                     "left":0,
                     "top":0,
                     "right":0,
                     "bottom":0
                  },
                  "previousConstraint":{  
                     "width":1704,
                     "height":990
                  },
                  "desiredSize":{  
                     "width":127,
                     "height":23
                  },
                  "hiddenDesire":{  
                     "width":126.751953125,
                     "height":23
                  },
                  "renderSize":{  
                     "width":1704,
                     "height":990
                  },
                  "layoutSlot":{  
                     "x":0,
                     "y":0,
                     "width":1704,
                     "height":990
                  },
                  "layoutClip":{  
                     "x":0,
                     "y":0,
                     "width":0,
                     "height":0
                  },
                  "compositeLayoutClip":{  
                     "x":0,
                     "y":0,
                     "width":0,
                     "height":0
                  },
                  "actualWidth":1704,
                  "actualHeight":990,
                  "z":null,
                  "totalIsRenderVisible":true,
                  "totalOpacity":1,
                  "totalIsHitTestVisible":true,
                  "extents":{  
                     "x":0,
                     "y":0,
                     "width":126.751953125,
                     "height":23
                  },
                  "extentsWithChildren":{  
                     "x":0,
                     "y":0,
                     "width":126.751953125,
                     "height":23
                  },
                  "surfaceBoundsWithChildren":{  
                     "x":0,
                     "y":0,
                     "width":126.751953125,
                     "height":23
                  },
                  "globalBoundsWithChildren":{  
                     "x":0,
                     "y":0,
                     "width":126.751953125,
                     "height":23
                  },
                  "layoutXform":{  
                     "0":1,
                     "1":0,
                     "2":0,
                     "3":0,
                     "4":1,
                     "5":0,
                     "6":0,
                     "7":0,
                     "8":1
                  },
                  "carrierXform":null,
                  "renderXform":{  
                     "0":1,
                     "1":0,
                     "2":0,
                     "3":0,
                     "4":1,
                     "5":0,
                     "6":0,
                     "7":0,
                     "8":1
                  },
                  "absoluteXform":{  
                     "0":1,
                     "1":0,
                     "2":0,
                     "3":0,
                     "4":1,
                     "5":0,
                     "6":0,
                     "7":0,
                     "8":1
                  },
                  "dirtyRegion":{  
                     "x":0,
                     "y":0,
                     "width":0,
                     "height":0
                  },
                  "dirtyFlags":0,
                  "uiFlags":6,
                  "forceInvalidate":false,
                  "padding":{  
                     "left":0,
                     "top":0,
                     "right":0,
                     "bottom":0
                  },
                  "selectionStart":0,
                  "selectionLength":0,
                  "textWrapping":0,
                  "textAlignment":0,
                  "lineStackingStrategy":0,
                  "lineHeight":null
               },
               "properties":[  
                  {  
                     "key":"width",
                     "value":null
                  },
                  {  
                     "key":"height",
                     "value":null
                  },
                  {  
                     "key":"minWidth",
                     "value":0
                  },
                  {  
                     "key":"minHeight",
                     "value":0
                  },
                  {  
                     "key":"maxWidth",
                     "value":null
                  },
                  {  
                     "key":"maxHeight",
                     "value":null
                  },
                  {  
                     "key":"useLayoutRounding",
                     "value":true
                  },
                  {  
                     "key":"margin",
                     "value":{  
                        "left":0,
                        "top":0,
                        "right":0,
                        "bottom":0
                     }
                  },
                  {  
                     "key":"horizontalAlignment",
                     "value":3
                  },
                  {  
                     "key":"verticalAlignment",
                     "value":3
                  },
                  {  
                     "key":"clip",
                     "value":null
                  },
                  {  
                     "key":"effect",
                     "value":null
                  },
                  {  
                     "key":"visibility",
                     "value":0
                  },
                  {  
                     "key":"opacity",
                     "value":1
                  },
                  {  
                     "key":"isHitTestVisible",
                     "value":true
                  },
                  {  
                     "key":"renderTransform",
                     "value":{  
                        "0":1,
                        "1":0,
                        "2":0,
                        "3":0,
                        "4":1,
                        "5":0,
                        "6":0,
                        "7":0,
                        "8":1
                     }
                  },
                  {  
                     "key":"renderTransformOrigin",
                     "value":{  
                        "x":0,
                        "y":0
                     }
                  },
                  {  
                     "key":"effectPadding",
                     "value":{  
                        "left":0,
                        "top":0,
                        "right":0,
                        "bottom":0
                     }
                  },
                  {  
                     "key":"previousConstraint",
                     "value":{  
                        "width":1704,
                        "height":990
                     }
                  },
                  {  
                     "key":"desiredSize",
                     "value":{  
                        "width":127,
                        "height":23
                     }
                  },
                  {  
                     "key":"hiddenDesire",
                     "value":{  
                        "width":126.751953125,
                        "height":23
                     }
                  },
                  {  
                     "key":"renderSize",
                     "value":{  
                        "width":1704,
                        "height":990
                     }
                  },
                  {  
                     "key":"layoutSlot",
                     "value":{  
                        "x":0,
                        "y":0,
                        "width":1704,
                        "height":990
                     }
                  },
                  {  
                     "key":"layoutClip",
                     "value":{  
                        "x":0,
                        "y":0,
                        "width":0,
                        "height":0
                     }
                  },
                  {  
                     "key":"compositeLayoutClip",
                     "value":{  
                        "x":0,
                        "y":0,
                        "width":0,
                        "height":0
                     }
                  },
                  {  
                     "key":"actualWidth",
                     "value":1704
                  },
                  {  
                     "key":"actualHeight",
                     "value":990
                  },
                  {  
                     "key":"z",
                     "value":null
                  },
                  {  
                     "key":"totalIsRenderVisible",
                     "value":true
                  },
                  {  
                     "key":"totalOpacity",
                     "value":1
                  },
                  {  
                     "key":"totalIsHitTestVisible",
                     "value":true
                  },
                  {  
                     "key":"extents",
                     "value":{  
                        "x":0,
                        "y":0,
                        "width":126.751953125,
                        "height":23
                     }
                  },
                  {  
                     "key":"extentsWithChildren",
                     "value":{  
                        "x":0,
                        "y":0,
                        "width":126.751953125,
                        "height":23
                     }
                  },
                  {  
                     "key":"surfaceBoundsWithChildren",
                     "value":{  
                        "x":0,
                        "y":0,
                        "width":126.751953125,
                        "height":23
                     }
                  },
                  {  
                     "key":"globalBoundsWithChildren",
                     "value":{  
                        "x":0,
                        "y":0,
                        "width":126.751953125,
                        "height":23
                     }
                  },
                  {  
                     "key":"layoutXform",
                     "value":{  
                        "0":1,
                        "1":0,
                        "2":0,
                        "3":0,
                        "4":1,
                        "5":0,
                        "6":0,
                        "7":0,
                        "8":1
                     }
                  },
                  {  
                     "key":"carrierXform",
                     "value":null
                  },
                  {  
                     "key":"renderXform",
                     "value":{  
                        "0":1,
                        "1":0,
                        "2":0,
                        "3":0,
                        "4":1,
                        "5":0,
                        "6":0,
                        "7":0,
                        "8":1
                     }
                  },
                  {  
                     "key":"absoluteXform",
                     "value":{  
                        "0":1,
                        "1":0,
                        "2":0,
                        "3":0,
                        "4":1,
                        "5":0,
                        "6":0,
                        "7":0,
                        "8":1
                     }
                  },
                  {  
                     "key":"dirtyRegion",
                     "value":{  
                        "x":0,
                        "y":0,
                        "width":0,
                        "height":0
                     }
                  },
                  {  
                     "key":"dirtyFlags",
                     "value":0
                  },
                  {  
                     "key":"uiFlags",
                     "value":6
                  },
                  {  
                     "key":"forceInvalidate",
                     "value":false
                  },
                  {  
                     "key":"padding",
                     "value":{  
                        "left":0,
                        "top":0,
                        "right":0,
                        "bottom":0
                     }
                  },
                  {  
                     "key":"selectionStart",
                     "value":0
                  },
                  {  
                     "key":"selectionLength",
                     "value":0
                  },
                  {  
                     "key":"textWrapping",
                     "value":0
                  },
                  {  
                     "key":"textAlignment",
                     "value":0
                  },
                  {  
                     "key":"lineStackingStrategy",
                     "value":0
                  },
                  {  
                     "key":"lineHeight",
                     "value":null
                  }
               ]
            }
        }]);

        //adapted from https://github.com/axel-zarate/angular-tree-view
        app.directive('treeView', ['$q', function ($q) {
          return {
            restrict: 'A',
            scope: {
              value: '=treeView'
            },
            replace: true,
            template:
              '<div class="tree">' +
                '<div tree-view-node="value">' +
                '</div>' +
              '</div>',
            controller: ['$scope', function ($scope) {

              var self = this,
                selectedNode;

              self.selectNode = function (value) {
                selectedNode = value;
              };

              self.isSelected = function (value) {
                return value === selectedNode;
              };

            }]
          };
        }]);

        app.directive('treeViewNode', ['$q', '$compile', function ($q, $compile) {
          return {
            restrict: 'A',
            require: '^treeView',
            link: function (scope, element, attrs, controller) {

              scope.expanded = false;

              scope.selectNode = function (value, event) {
                event.preventDefault();
                toggleExpanded();
                var nodeScope = scope;
                while (nodeScope.value) {
                  nodeScope = nodeScope.$parent;
                }
                controller.selectNode(value);
              };
              
              scope.isSelected = function (node) {
                return controller.isSelected(node);
              };

              scope.isDict = function (obj) {
                if (obj != undefined) {
                  if (obj.constructor === Array) {
                    return false;
                  } 
                  if (obj.constructor === String) {
                    return false;
                  } 
                  if (obj.constructor === Object) {
                    return true;
                  }
                  if (obj.constructor === Number) {
                    return true;
                  }
                  return false;
                } else {
                  return false;
                }
              }
              scope.getFileType = function(obj) {
                if (obj != undefined) {
                  if (obj.constructor === Array) {
                    return 'Array';
                  }
                  if (obj.constructor === String) {
                    return 'String';
                  } 
                  if (obj.constructor === Object) {
                    return 'Obj';
                  }
                  if (obj.constructor === Number) {
                    return 'Number';
                  }
                  return 'N/A';
                } else {
                  return 'N/A';
                }
              }

              function toggleExpanded() {
                if (!scope.isDict(scope.value)) return;
                scope.expanded = !scope.expanded;
              }

              function render() {
                var template =
                  '<div class="tree-folder" ng-repeat="(key, value) in ' + attrs.treeViewNode + '">' +
                    '<a href="#" class="tree-folder-header inline" ng-click="selectNode(value, $event)"}" ng-class="{ selected: isSelected(value) }">' +
                      '<span class="tree-folder-name">{{key}} {{getFileType(value)}}</span> ' +
                    '</a>' +
                    '<div class="tree-folder-content" ng-show="expanded" >' +
                      '<div ng-if="isDict(value)">' +
                        '<div tree-view-node="value"></div>' +
                      '</div>' +
                      '<div ng-if="!isDict(value)">' +
                        '<div class="tree-folder">' +
                          '<div class="tree-folder-header inline">{{value}}</div>' +
                        '</div>' + 
                      '</div>' +
                    '</div>' +
                  '</div>';

                element.html('').append($compile(template)(scope));
              }

              render();
            }
          };
        }]);
      })();
    </script>
    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).
        
        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can 
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.
      
      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:
          
          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <!--SCRIPTS END-->
    <script src="//localhost:35729/livereload.js"></script>
  </body>
</html>
